{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.0.3",
    "parameters": {
        "targetVnetResourceId": {
            "type": "string",
            "metadata": {
                "description": "The regional network spoke VNet Resource ID that the cluster will be joined to"
            }
        },
        "k8sRbacAadProfileAdminGroupObjectID": {
            "type": "string",
            "metadata": {
                "description": "Group that has admin access to this cluster"
            }
        },
        "k8sRbacAadProfileTenantId": {
            "type": "string",
            "metadata": {
                "description": "This is tennant where the ServerAppId, ServerAppSecret, ClientAppId all reside"
            }
        },
        "appGatewayListenerCertificate": {
            "type": "string",
            "metadata": {
                "description": "The certificate data for app gateway TLS termination. It is base64"
            }
        },
        "aksIngressControllerCertificate": {
            "type": "string",
            "metadata": {
                "description": "The base 64 encoded AKS Ingress Controller public certificate (as .crt or .cer) to be stored in Azure Key Vault as secret and referenced by Azure Application Gateway as a trusted root certificate."
            }
        },
        "clusterAuthorizedIPRanges": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "IP ranges authorized to contact the Kubernetes API server. Passing an empty array will result in no IP restrictions. If any are provided, remember to also provide the public IP of the egress Azure Firewall otherwise your nodes will not be able to talk to the API server (e.g. Flux)."
            }
        },
        "location": {
            "defaultValue": "eastus2",
            "type": "string",
            "allowedValues": [
                "australiaeast",
                "canadacentral",
                "centralus",
                "eastus",
                "eastus2",
                "westus2",
                "francecentral",
                "germanywestcentral",
                "northeurope",
                "southafricanorth",
                "southcentralus",
                "uksouth",
                "westeurope",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "AKS Service, Node Pool, and supporting services (KeyVault, App Gateway, etc) region.  The network team maintains this approved regional list which is a subset of zones with Availability Zone support."
            }
        },
        "geoRedundancyLocation": {
            "defaultValue": "centralus",
            "type": "string",
            "allowedValues": [
                "australiasoutheast",
                "canadaeast",
                "eastus2",
                "westus",
                "centralus",
                "westcentralus",
                "francesouth",
                "germanynorth",
                "westeurope",
                "ukwest",
                "northeurope",
                "japanwest",
                "southafricawest",
                "northcentralus",
                "eastasia",
                "eastus",
                "westus2",
                "francecentral",
                "uksouth",
                "japaneast",
                "southeastasia"
            ],
            "metadata": {
                "description": "For Azure resources that support native geo-redunancy, provide the location the redundant service will have its secondary. Should be different than the location parameter and ideally should be a paired region - https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions. This region does not need to support availability zones."
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.19.9",
            "type": "string"
        },
        "acrResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "the resource group name of the Azure Continer Registry"
            }
        },
        "deliveryIdName": {
            "metadata": {
                "description": "the name of the delivery managed identity"
            },
            "type": "string"
        },
        "deliveryPrincipalId": {
            "metadata": {
                "description": "the principal id for the delivery managed identity"
            },
            "type": "string"
        },
        "droneSchedulerIdName": {
            "metadata": {
                "description": "the name of the drone scheduler managed identity"
            },
            "type": "string"
        },
        "droneSchedulerPrincipalId": {
            "metadata": {
                "description": "the principal id for the drone scheduler managed identity"
            },
            "type": "string"
        },
        "workflowIdName": {
            "metadata": {
                "description": "the name of the workflow managed identity"
            },
            "type": "string"
        },
        "workflowPrincipalId": {
            "metadata": {
                "description": "the principal id for the workflow managed identity"
            },
            "type": "string"
        },
        "ingressControllerIdName": {
            "metadata": {
                "description": "the name of the ingress controller managed identity"
            },
            "type": "string"
        },
        "ingressControllerPrincipalId": {
            "metadata": {
                "description": "the principal id for the ingress controller managed identity"
            },
            "type": "string"
        },
        "environmentName": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev"
            ]
        }
    },
    "variables": {
        "networkContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7')]",
        "monitoringMetricsPublisherRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
        "acrPullRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "managedIdentityOperatorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830')]",
        "virtualMachineContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
        "readerRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "contributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c')]",

        "subRgUniqueString": "[uniqueString('aks', subscription().subscriptionId, resourceGroup().id)]",

        "nodeResourceGroupName": "[concat('rg-', variables('clusterName'), '-nodepools')]",
        "clusterName": "[concat('aks-', variables('subRgUniqueString'))]",
        "logAnalyticsWorkspaceName": "[concat('la-', variables('clusterName'))]",
        "containerInsightsSolutionName": "[concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')')]",
        "defaultAcrName": "[concat('acraks', variables('subRgUniqueString'))]",

        "vNetResourceGroup": "[split(parameters('targetVnetResourceId'),'/')[4]]",
        "vnetNodePoolSubnetResourceId": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-clusternodes')]",

        "agwName": "[concat( 'apw-', variables('clusterName')) ]",
        "apwResourceId": "[resourceId('Microsoft.Network/applicationGateways', variables('agwName'))]",

        "keyVaultName": "[concat( 'kv-', variables('clusterName'))]",

        "aiNamePrefix": "ai",
        "nestedACRDeploymentName": "[concat('azuredeploy-acr-',parameters('acrResourceGroupName'),parameters('environmentName'))]",
        "environmentSettings": {
            "dev": {
                "acrName": "[variables('defaultAcrName')]",
                "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
                "deliveryRedisCacheSKU": "Basic",
                "deliveryRedisCacheFamily": "C",
                "deliveryRedisCacheCapacity": 0,
                "deliveryRedisDiagnosticsEnabled": false,
                "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
                "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespaceSKU": "Premium",
                "ingestionSBNamespaceTier": "Premium",
                "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionServiceAccessKeyName": "IngestionServiceAccessKey",
                "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
                "workflowServiceAccessKeyName": "WorkflowServiceAccessKey"
            }
        }
    },
    "resources": [
     {
            "name": "[variables('nestedACRDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "resourceGroup": "[parameters('acrResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "name": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
                            "type": "Microsoft.ContainerRegistry/registries",
                            "apiVersion": "2019-05-01",
                            "sku": {
                                "name": "Premium",
                                "tier": "Premium"
                            },
                            "location": "[resourceGroup().location]",
                            "tags": {
                                "displayName": "Container Registry"
                            },
                            "properties": {
                                "adminUserEnabled": false,
                                "networkRuleSet": {
                                    "defaultAction": "Deny",
                                    "virtualNetworkRules": [
                                    ],
                                    "ipRules": [
                                    ]
                                },
                                "policies": {
                                    "quarantinePolicy": {
                                        "status": "disabled"
                                    },
                                    "trustPolicy": {
                                        "type": "Notary",
                                        "status": "disabled"
                                    },
                                    "retentionPolicy": {
                                        "days": 15,
                                        "status": "enabled"
                                    }
                                }
                            },
                            "resources": [
                                {
                                    "type": "replications",
                                    "apiVersion": "2019-05-01",
                                    "name": "[parameters('geoRedundancyLocation')]",
                                    "location": "[parameters('geoRedundancyLocation')]",
                                    "dependsOn": [
                                        "[variables('environmentSettings')[parameters('environmentName')].acrName]"
                                    ],
                                    "properties": {
                                    }
                                }
                            ]
                        },
                        {
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].acrName,'/Microsoft.Authorization/',guid(concat(resourceGroup().id), variables('acrPullRole')))]",
                            "dependsOn": [
                                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[variables('acrPullRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                                "principalType": "ServicePrincipal"
                            }
                        },
                        {
                            "type": "Microsoft.Network/privateEndpoints",
                            "apiVersion": "2020-04-01",
                            "name": "nodepool-to-acr",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]",
                                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName, '/replications/', parameters('geoRedundancyLocation'))]"
                            ],
                            "properties": {
                                "subnet": {
                                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                                },
                                "privateLinkServiceConnections": [
                                    {
                                        "name": "nodepoolsubnet-to-registry",
                                        "properties": {
                                            "privateLinkServiceId": "[resourceId(parameters('acrResourceGroupName'), 'Microsoft.ContainerRegistry/registries', variables('environmentSettings')[parameters('environmentName')].acrName)]",
                                            "groupIds": [
                                                "registry"
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                            "apiVersion": "2020-04-01",
                            "name": "[concat('nodepool-to-acr', '/default')]",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[resourceId(parameters('acrResourceGroupName'), 'Microsoft.Network/privateEndpoints', 'nodepool-to-acr')]"
                            ],
                            "properties": {
                                "privateDnsZoneConfigs": [
                                    {
                                        "name": "privatelink-azurecr-io",
                                        "properties": {
                                            "privateDnsZoneId": "[resourceId(variables('vNetResourceGroup'), 'Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.ContainerRegistry/registries/providers/diagnosticSettings",
                            "apiVersion": "2017-05-01-preview",
                            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].acrName, '/Microsoft.Insights/default')]",
                            "dependsOn": [
                                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]"
                            ],
                            "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                                "metrics": [
                                    {
                                        "timeGrain": "PT1M",
                                        "category": "AllMetrics",
                                        "enabled": true
                                    }
                                ],
                                "logs": [
                                    {
                                        "category": "ContainerRegistryRepositoryEvents",
                                        "enabled": true
                                    },
                                    {
                                        "category": "ContainerRegistryLoginEvents",
                                        "enabled": true
                                    }
                                ]
                            }
                        }
                    ],
                    "outputs": {
                        "acrId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('environmentSettings')[parameters('environmentName')].acrName)]",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "appw-to-keyvault",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "aksic-to-keyvault",
            "apiVersion": "2018-11-30",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'appw-to-keyvault')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','appw-to-keyvault')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','appw-to-keyvault')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ]
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ],
                            "certificates": [
                                "get"
                            ]
                        }
                    }
                ],
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('keyVaultName'), '/Microsoft.Insights/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "AuditEvent",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "nodepool-to-akv",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[variables('vnetNodePoolSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "nodepoolsubnet-to-akv",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                            "groupIds": [
                                "vault"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2020-04-01",
            "name": "nodepool-to-akv/default",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'nodepool-to-akv')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "privatelink-akv-net",
                        "properties": {
                            "privateDnsZoneId": "[resourceId(variables('vNetResourceGroup'),'Microsoft.Network/privateDnsZones','privatelink.vaultcore.azure.net')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat( variables('keyVaultName') , '/sslcert')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
            ],
            "properties": {
                "value": "[parameters('appGatewayListenerCertificate')]",
                "recoveryLevel": "Purgeable"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat( variables('keyVaultName') , '/appgw-backendpool-fabrikam-com-tls')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('aksIngressControllerCertificate')]",
                "recoveryLevel": "Purgeable"
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2020-07-01",
            "name": "[variables('agwName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName') )]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',  'appw-to-keyvault')]": {
                    }
                }
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "tags": {
            },
            "properties": {
                "sku": {
                    "name": "WAF_v2",
                    "tier": "WAF_v2"
                },
                "sslPolicy": {
                    "policyType": "Custom",
                    "cipherSuites": [
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
                    ],
                    "minProtocolVersion": "TLSv1_2"
                },
				"trustedRootCertificates": [
					{
						"name": "root-cert-wildcard-aks-ingress-fabrikam",
						"properties": {
							"keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/appgw-backendpool-fabrikam-com-tls')]"
						}
					}
				],
                "gatewayIPConfigurations": [
                    {
                        "name": "apw-ip-configuration",
                        "properties": {
                            "subnet": {
                                "id": "[concat(parameters('targetVnetResourceId'), '/subnets/snet-applicationgateways')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "apw-frontend-ip-configuration",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId(subscription().subscriptionId,variables('vNetResourceGroup'),'Microsoft.Network/publicIpAddresses','pip-ShippingDroneDelivery-00')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "apw-frontend-ports",
                        "properties": {
                            "port": 443
                        }
                    }
                ],
                "autoscaleConfiguration": {
                    "minCapacity": "0",
                    "maxCapacity": "10"
                },
                "webApplicationFirewallConfiguration": {
                    "enabled": true,
                    "firewallMode": "Prevention",
                    "ruleSetType": "OWASP",
                    "ruleSetVersion": "3.0"
                },
                "enableHttp2": false,
                "sslCertificates": [
                    {
                        "name": "appgw-ssl-certificate",
                        "properties": {
                            "keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/sslcert')]"
                        }
                    }
                ],
                "probes": [],
                "backendAddressPools": [
                    {
                        "name": "aks-ingress.fabrikam.com",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "aks-ingress.fabrikam.com"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "aks-ingress-fabrikam-backendpool-httpsettings",
                        "properties": {
                            "port": 80,
                            "protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "requestTimeout": 20
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "listener-https",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('apwResourceId'), '/frontendIPConfigurations/apw-frontend-ip-configuration')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('apwResourceId'), '/frontendPorts/apw-frontend-ports')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(variables('apwResourceId'), '/sslCertificates/', 'appgw-ssl-certificate')]"
                            },
                            "hostName": "dronedelivery.fabrikam.com",
                            "hostNames": [
                            ],
                            "requireServerNameIndication": true
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "apw-routing-rules",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('apwResourceId'), '/httpListeners/listener-https')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('apwResourceId'), '/backendAddressPools/aks-ingress.fabrikam.com')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('apwResourceId'), '/backendHttpSettingsCollection/aks-ingress-fabrikam-backendpool-httpsettings')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('agwName'), '/Microsoft.Insights/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', variables('agwName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "ApplicationGatewayAccessLog",
                        "enabled": true
                    },
                    {
                        "category": "ApplicationGatewayPerformanceLog",
                        "enabled": true
                    },
                    {
                        "category": "ApplicationGatewayFirewallLog",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterSpHasRbacToVNet",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "resourceGroup": "[variables('vNetResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(split(parameters('targetVnetResourceId'),'/')[8], '/Microsoft.Authorization/', guid(resourceGroup().id, variables('networkContributorRole'),'-aks-system-assigned-managed-identity-ilb'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-11-01', 'Full').identity.principalId]",
                                "scope": "[parameters('targetVnetResourceId')]",
                                "principalType": "ServicePrincipal"
                            }
                        },
                        {
                            "type": "Microsoft.Network/publicIpAddresses/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat('pip-ShippingDroneDelivery-00', '/Microsoft.Authorization/', guid(resourceGroup().id, variables('networkContributorRole'),'-agic-system-assigned-managed-identity-appw-public-ip'))]",
                            "comments": "Grant the Azure App Gateway Ingress Controller manage identity with Network Contributor role permissions over the Application Gateway Public Ip",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "principalId": "[parameters('ingressControllerPrincipalId')]",
                                "scope": "[resourceId(subscription().subscriptionId,variables('vNetResourceGroup'),'Microsoft.Network/publicIpAddresses','pip-ShippingDroneDelivery-00')]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EnsureClusterUserAssignedHasRbacToManageVMSS",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "resourceGroup": "[variables('nodeResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "name": "[guid(resourceGroup().id)]",
                            "apiVersion": "2018-09-01-preview",
                            "comments": "It is required to grant the AKS cluster with Virtual Machine Contributor role permissions over the cluster infrastructure resource group to work with Managed Identities and aad-pod-identity. Otherwise MIC component fails while attempting to update MSI on VMSS cluster nodes",
                            "properties": {
                                "roleDefinitionId": "[variables('virtualMachineContributorRole')]",
                                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            },
            "resources": [
                {
                    "apiVersion": "2015-03-20",
                    "name": "AllPrometheus",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "All collected Prometheus information",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\"",
                        "version": 1
                    }
                },
                {
                    "apiVersion": "2015-03-20",
                    "name": "ForbiddenReponsesOnIngress",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Increase number of forbidden response on the Ingress Controller",
                        "query": "let value = toscalar(InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize Value = avg(Val) by bin(TimeGenerated, 5m) | summarize min = min(Value)); InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize AggregatedValue = avg(Val)-value by bin(TimeGenerated, 5m) | order by TimeGenerated | render barchart",
                        "version": 1
                    }
                },
                {
                    "apiVersion": "2015-03-20",
                    "name": "NodeRebootRequested",
                    "type": "savedSearches",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Nodes reboot required by kured",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\" and Name == \"kured_reboot_required\" | where Val > 0",
                        "version": 1
                    }
                }
            ]
        },
        {
            "name": "PodFailedScheduledQuery",
            "type": "microsoft.insights/scheduledQueryRules",
            "apiVersion": "2018-04-16",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "description": "Alert on pod Failed phase.",
                "enabled": "true",
                "source": {
                    "query": "[concat('//https://docs.microsoft.com/azure/azure-monitor/insights/container-insights-alerts \r\n let endDateTime = now(); let startDateTime = ago(1h); let trendBinSize = 1m; let clusterName = \"',variables('clusterName'),'\"; KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | where ClusterName == clusterName | distinct ClusterName, TimeGenerated | summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName | join hint.strategy=broadcast ( KubePodInventory | where TimeGenerated < endDateTime | where TimeGenerated >= startDateTime | distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus | summarize TotalCount = count(), PendingCount = sumif(1, PodStatus =~ \"Pending\"), RunningCount = sumif(1, PodStatus =~ \"Running\"), SucceededCount = sumif(1, PodStatus =~ \"Succeeded\"), FailedCount = sumif(1, PodStatus =~ \"Failed\") by ClusterName, bin(TimeGenerated, trendBinSize) ) on ClusterName, TimeGenerated | extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount | project TimeGenerated, TotalCount = todouble(TotalCount) / ClusterSnapshotCount, PendingCount = todouble(PendingCount) / ClusterSnapshotCount, RunningCount = todouble(RunningCount) / ClusterSnapshotCount, SucceededCount = todouble(SucceededCount) / ClusterSnapshotCount, FailedCount = todouble(FailedCount) / ClusterSnapshotCount, UnknownCount = todouble(UnknownCount) / ClusterSnapshotCount| summarize AggregatedValue = avg(FailedCount) by bin(TimeGenerated, trendBinSize)')]",
                    "dataSourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                    "queryType": "ResultCount"
                },
                "schedule": {
                    "frequencyInMinutes": "5",
                    "timeWindowInMinutes": "10"
                },
                "action": {
                    "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                    "severity": "3",
                    "trigger": {
                        "thresholdOperator": "GreaterThan",
                        "threshold": "3",
                        "metricTrigger": {
                            "thresholdOperator": "GreaterThan",
                            "threshold": "2",
                            "metricTriggerType": "Consecutive"
                        }
                    }
                }
            }
        },
        {
            "type": "microsoft.insights/activityLogAlerts",
            "apiVersion": "2017-04-01",
            "name": "AllAzureAdvisorAlert",
            "location": "Global",
            "properties": {
                "scopes": [
                    "[resourceGroup().id]"
                ],
                "condition": {
                    "allOf": [
                        {
                            "field": "category",
                            "equals": "Recommendation"
                        },
                        {
                            "field": "operationName",
                            "equals": "Microsoft.Advisor/recommendations/available/action"
                        }
                    ]
                },
                "actions": {
                    "actionGroups": [
                    ]
                },
                "enabled": true,
                "description": "All azure advisor alerts"
            }
        },
        {
            "apiVersion": "2015-11-01-preview",
            "type": "Microsoft.OperationsManagement/solutions",
            "name": "[variables('containerInsightsSolutionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[variables('containerInsightsSolutionName')]",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2020-11-01",
            "name": "[variables('clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions', variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[uniqueString(subscription().subscriptionId, resourceGroup().id, variables('clusterName'))]",
                "agentPoolProfiles": [
                    {
                        "name": "npsystem",
                        "count": 3,
                        "vmSize": "Standard_DS2_v2",
                        "osDiskSizeGB": 80,
                        "osDiskType": "Ephemeral",
                        "osType": "Linux",
                        "minCount": 3,
                        "maxCount": 4,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ],
                        "upgradeSettings": {
                            "maxSurge": "33%"
                        }
                    },
                    {
                        "name": "npuser01",
                        "count": 2,
                        "vmSize": "Standard_DS3_v2",
                        "osDiskSizeGB": 120,
                        "osDiskType": "Ephemeral",
                        "osType": "Linux",
                        "minCount": 2,
                        "maxCount": 5,
                        "vnetSubnetID": "[variables('vnetNodePoolSubnetResourceId')]",
                        "enableAutoScaling": true,
                        "type": "VirtualMachineScaleSets",
                        "mode": "User",
                        "scaleSetPriority": "Regular",
                        "scaleSetEvictionPolicy": "Delete",
                        "orchestratorVersion": "[parameters('kubernetesVersion')]",
                        "enableNodePublicIP": false,
                        "maxPods": 30,
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ],
                        "upgradeSettings": {
                            "maxSurge": "33%"
                        }
                    }
                ],
                "servicePrincipalProfile": {
                    "clientId": "msi"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": false
                    },
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                        }
                    },
                    "aciConnectorLinux": {
                        "enabled": false
                    },
                    "azurepolicy": {
                        "enabled": true,
                        "config": {
                            "version": "v2"
                        }
                    }
                },
                "nodeResourceGroup": "[variables('nodeResourceGroupName')]",
                "enableRBAC": true,
                "enablePodSecurityPolicy": false,
                "maxAgentPools": 2,
                "networkProfile": {
                    "networkPlugin": "azure",
                    "networkPolicy": "azure",
                    "outboundType": "userDefinedRouting",
                    "loadBalancerSku": "standard",
                    "loadBalancerProfile": "[json('null')]",
                    "serviceCidr": "172.16.0.0/16",
                    "dnsServiceIP": "172.16.0.10",
                    "dockerBridgeCidr": "172.18.0.1/16"
                },
                "aadProfile": {
                    "managed": true,
                    "adminGroupObjectIDs": [
                        "[parameters('k8sRbacAadProfileAdminGroupObjectID')]"
                    ],
                    "tenantID": "[parameters('k8sRbacAadProfileTenantId')]"
                },
                "autoScalerProfile": {
                    "scan-interval": "10s",
                    "scale-down-delay-after-add": "10m",
                    "scale-down-delay-after-delete": "20s",
                    "scale-down-delay-after-failure": "3m",
                    "scale-down-unneeded-time": "10m",
                    "scale-down-unready-time": "20m",
                    "scale-down-utilization-threshold": "0.5",
                    "max-graceful-termination-sec": "600",
                    "balance-similar-node-groups": "false",
                    "expander": "random",
                    "skip-nodes-with-local-storage": "true",
                    "skip-nodes-with-system-pods": "true",
                    "max-empty-bulk-delete": "10",
                    "max-total-unready-percentage": "45",
                    "ok-total-unready-count": "3"
                },
                "apiServerAccessProfile": {
                    "authorizedIPRanges": "[parameters('clusterAuthorizedIPRanges')]",
                    "enablePrivateCluster": false
                }
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('clusterName'), '/Microsoft.Insights/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "logs": [
                    {
                        "category": "cluster-autoscaler",
                        "enabled": true
                    },
                    {
                        "category": "kube-controller-manager",
                        "enabled": true
                    },
                    {
                        "category": "kube-audit-admin",
                        "enabled": true
                    },
                    {
                        "category": "guard",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Node CPU utilization high for ', variables('clusterName'), ' CI-1')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "cpuUsagePercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node CPU utilization across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Node working set memory utilization high for ', variables('clusterName'), ' CI-2')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "memoryWorkingSetPercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node working set memory utilization across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Jobs completed more than 6 hours ago for ', variables('clusterName'), ' CI-11')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "completedJobsCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors completed jobs (more than 6 hours ago).",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Container CPU usage high for ', variables('clusterName'), ' CI-9')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "cpuExceededPercentage",
                            "metricNamespace": "Insights.Container/containers",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 90.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors container CPU utilization.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Container working set memory usage high for ', variables('clusterName'), ' CI-10')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "memoryWorkingSetExceededPercentage",
                            "metricNamespace": "Insights.Container/containers",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 90.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors container working set memory utilization.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Pods in failed state for ', variables('clusterName'), ' CI-4')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "phase",
                                    "operator": "Include",
                                    "values": [
                                        "Failed"
                                    ]
                                }
                            ],
                            "metricName": "podCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Pod status monitoring.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Disk usage high for ', variables('clusterName'), ' CI-5')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "host",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "device",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "DiskUsedPercentage",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors disk usage for all nodes and storage devices.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Nodes in not ready status for ', variables('clusterName'), ' CI-3')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "status",
                                    "operator": "Include",
                                    "values": [
                                        "NotReady"
                                    ]
                                }
                            ],
                            "metricName": "nodesCount",
                            "metricNamespace": "Insights.Container/nodes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "Node status monitoring.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Containers getting OOM killed for ', variables('clusterName'), ' CI-6')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "oomKilledContainerCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors number of containers killed due to out of memory (OOM) error.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Persistent volume usage high for ', variables('clusterName'), ' CI-18')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "podName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetesNamespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "pvUsageExceededPercentage",
                            "metricNamespace": "Insights.Container/persistentvolumes",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors persistent volume utilization.",
                "enabled": false,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Pods not in ready state for ', variables('clusterName'), ' CI-8')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "PodReadyPercentage",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "LessThan",
                            "threshold": 80.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors for excessive pods not in the ready state.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "microsoft.containerservice/managedclusters",
                "windowSize": "PT5M"
            }
        },
        {
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "name": "[concat('Restarting container count for ', variables('clusterName'), ' CI-7')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "actions": [],
                "criteria": {
                    "allOf": [
                        {
                            "criterionType": "StaticThresholdCriterion",
                            "dimensions": [
                                {
                                    "name": "kubernetes namespace",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                },
                                {
                                    "name": "controllerName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "metricName": "restartingContainerCount",
                            "metricNamespace": "Insights.Container/pods",
                            "name": "Metric1",
                            "operator": "GreaterThan",
                            "threshold": 0.0,
                            "timeAggregation": "Average",
                            "skipMetricValidation": true
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "description": "This alert monitors number of containers restarting across the cluster.",
                "enabled": true,
                "evaluationFrequency": "PT1M",
                "scopes": [
                    "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
                ],
                "severity": 3,
                "targetResourceType": "Microsoft.ContainerService/managedClusters",
                "windowSize": "PT1M"
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the Kublet's Managed Identity the metrics publisher role for enhanced monitoring",
            "name": "[concat(variables('clusterName'), '/Microsoft.Authorization/', guid(resourceGroup().id, variables('clusterName'), 'kubelet', variables('monitoringMetricsPublisherRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]",
                "[resourceId('Microsoft.OperationsManagement/solutions',variables('containerInsightsSolutionName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-11-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the OMS Agent's Managed Identity the metrics publisher role to push alerts",
            "name": "[concat(variables('clusterName'), '/Microsoft.Authorization/', guid(resourceGroup().id, variables('clusterName'), 'omsagent', variables('monitoringMetricsPublisherRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-11-01').addonProfiles.omsagent.identity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat('aksic-to-keyvault', '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('managedIdentityOperatorRole')))]",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the cluster ingress controller manage identity",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-11-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat('appw-to-keyvault', '/Microsoft.Authorization/', guid(concat(resourceGroup().id, 'appw-to-keyvault'), variables('managedIdentityOperatorRole')))]",
            "apiVersion": "2018-09-01-preview",
            "comments": "Grant the AGIC with Manage Identity Operator role permissions over the application gateway manage identity",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'appw-to-keyvault')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[parameters('ingressControllerPrincipalId')]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('keyVaultName'), '/Microsoft.Authorization/', guid(concat('aksic-to-keyvault',resourceGroup().id), variables('readerRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
            ],
            "comments": "Grant the AKS cluster ingress controller with Reader role permissions over KeyVault containing TLS certs",
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).principalId]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('42b8ef37-b724-4e24-bbc8-7a7708edfe00', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "audit"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('df49d893-a74c-421d-bc95-c663042e5b80', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policyDefinitions/df49d893-a74c-421d-bc95-c663042e5b80', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/df49d893-a74c-421d-bc95-c663042e5b80",
              "parameters": {
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "audit"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('e345eecc-fa47-480f-9e88-67dcc122b164', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policyDefinitions/e345eecc-fa47-480f-9e88-67dcc122b164', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/e345eecc-fa47-480f-9e88-67dcc122b164",
              "parameters": {
                "cpuLimit": {
                  "value": "1000m"
                },
                "memoryLimit": {
                  "value": "512Mi"
                },
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[guid('febd0533-8e55-448f-b837-bd0e06f16469', resourceGroup().name, variables('clusterName'))]",
            "apiVersion": "2020-03-01",
            "properties": {
              "displayName": "[concat('[', variables('clusterName'),'] ', reference('/providers/Microsoft.Authorization/policyDefinitions/febd0533-8e55-448f-b837-bd0e06f16469', '2020-09-01').displayName)]",
              "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
              "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/febd0533-8e55-448f-b837-bd0e06f16469",
              "parameters": {
                "allowedContainerImagesRegex": {
                  "value": "[concat(variables('environmentSettings')[parameters('environmentName')].acrName,'.azurecr.io/.+$|mcr.microsoft.com/.+$|registry.hub.docker.com/library/.+$')]"
                },
                "excludedNamespaces": {
                  "value": [
                    "kube-system",
                    "gatekeeper-system",
                    "azure-arc",
                    "cluster-baseline-settings"
                  ]
                },
                "effect": {
                  "value": "deny"
                }
              }
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02-preview",
            "kind": "other",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "App Insights instance - Distributed Tracing",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "Application_Type": "other"
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisName]",
            "type": "Microsoft.Cache/Redis",
            "apiVersion": "2019-07-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Redis Cache for inflight deliveries",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]",
                "TODO": "private endpoint"
            },
            "dependsOn": [
            ],
            "properties": {
                "redisEnableNonSslPort": "false",
                "sku": {
                    "capacity": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheCapacity]",
                    "family": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheFamily]",
                    "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheSKU]"
                }
            },
            "resources": [
                {
                    "apiVersion": "2017-05-01-preview",
                    "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
                    "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryRedisName, '/Microsoft.Insights/', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [],
                        "metrics": [
                            {
                                "timeGrain": "AllMetrics",
                                "enabled": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisDiagnosticsEnabled]",
                                "retentionPolicy": {
                                    "days": 90,
                                    "enabled": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisDiagnosticsEnabled]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
            "apiVersion": "2020-04-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "Delivery Cosmos Db",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
                "databaseAccountOfferType": "Standard",
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [
                ],
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0
                    }
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2020-04-01",
            "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
            "kind": "MongoDB",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "Package Cosmos Db",
                "app": "fabrikam-package",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "databaseAccountOfferType": "Standard",
                "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
            "apiVersion": "2020-04-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "Drone Scheduler Cosmos Db",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
                "databaseAccountOfferType": "Standard",
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [
                ],
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces",
            "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
            "apiVersion": "2018-01-01-preview",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespaceSKU]",
                "tier": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespaceTier]"
            },
            "tags": {
                "displayName": "Ingestion and Workflow Service Bus",
                "app": "fabrikam-ingestion and fabrikam-workflow",
                "app-producer": "fabrikam-ingestion",
                "app-consumer": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "resources": [
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
                    "type": "queues",
                    "apiVersion": "2017-04-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ],
                    "properties": {
                        "lockDuration": "PT5M",
                        "maxSizeInMegabytes": "1024"
                    }
                },
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKeyName]",
                    "type": "AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "properties": {
                        "rights": [
                            "Send"
                        ]
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                },
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKeyName]",
                    "type": "AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "properties": {
                        "rights": [
                            "Listen"
                        ]
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName]",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "Delivery Key Vault",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "virtualNetworkRules": [
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('deliveryPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "CosmosDB-Endpoint",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName)).documentEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDB-Key",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName), '2016-03-31').primaryMasterKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "Redis-Endpoint",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)).hostName]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "Redis-AccessKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName), '2016-04-01').primaryKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "ApplicationInsights--InstrumentationKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "DroneScheduler Key Vault",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "virtualNetworkRules": [
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('droneSchedulerPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "ApplicationInsights--InstrumentationKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBEndpoint",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)).documentEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName), '2016-03-31').primaryMasterKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBConnectionMode",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "Gateway"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBConnectionProtocol",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "Https"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxConnectionsLimit",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "50"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxParallelism",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "-1"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxBufferedItemCount",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "0"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "FeatureManagement--UsePartitionKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "false"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "tags": {
                "displayName": "Workflow Key Vault",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]",
                "TODO": "prv endpoint + diagnostic settings"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "virtualNetworkRules": [
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('workflowPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "QueueName",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueEndpoint",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)).serviceBusEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueAccessPolicyName",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKeyName]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueAccessPolicyKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[listkeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKeyName), '2017-04-01').primaryKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKeyName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "ApplicationInsights-InstrumentationKey",
                    "apiVersion": "2019-09-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName, '/Microsoft.Authorization/', guid(concat(parameters('deliveryIdName'), resourceGroup().id), variables('readerRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]"
            ],
            "comments": "Grant the Fabrikam delivery app manage identity with Reader role permissions over KeyVault",
            "tags": {
                "displayName": "Fabrikam delivery app RBAC access for KeyVault",
                "what": "delivery-identity-rbac-reader-to-keyvault",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[parameters('deliveryPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName, '/Microsoft.Authorization/', guid(concat(parameters('workflowIdName'), resourceGroup().id), variables('readerRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
            ],
            "comments": "Grant the Fabrikam workflow app manage identity with reader role permissions over KeyVault",
            "tags": {
                "displayName": "Fabrikam workflow app RBAC access for KeyVault",
                "what": "workflow-identity-rbac-reader-to-keyvault",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[parameters('workflowPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName, '/Microsoft.Authorization/', guid(concat(parameters('droneSchedulerIdName'), resourceGroup().id), variables('readerRole')))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
            ],
            "comments": "Grant the Fabrikam drone scheduler app Manage Identity with reader role permissions over KeyVault",
            "tags": {
                "displayName": "Fabrikam drone scheduler app RBAC access for KeyVault",
                "what": "dronescheduler-identity-rbac-reader-to-keyvault",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[parameters('droneSchedulerPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('deliveryIdName'), '/Microsoft.Authorization/', guid(concat(parameters('deliveryIdName'),parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the delivery manage identity",
            "tags": {
                "displayName": "AKS SP RBAC Access for delivery managed identity",
                "what": "aks-identity-rbac-manage-identity-operator-to-delivery-identity",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('workflowIdName'), '/Microsoft.Authorization/', guid(concat(parameters('workflowIdName'),parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the workflow manage identity",
            "tags": {
                "displayName": "AKS SP RBAC Access for workflow managed identity",
                "what": "aks-identity-rbac-manage-identity-operator-to-workflow-identity",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('droneSchedulerIdName'), '/Microsoft.Authorization/', guid(concat(parameters('droneSchedulerIdName'),parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the drone scheduler manage identity",
            "tags": {
                "displayName": "AKS SP RBAC Access for dronescheduler managed identity",
                "what": "aks-identity-rbac-manage-identity-operator-to-dronescheduler-identity",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('ingressControllerIdName'), '/Microsoft.Authorization/', guid(concat(parameters('ingressControllerIdName'),parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName'))]"
            ],
            "comments": "Grant the AKS cluster with Manage Identity Operator role permissions over the ingress controller manage identity",
            "tags": {
                "displayName": "AKS SP RBAC Access for agic managed identity",
                "what": "aks-identity-rbac-manage-identity-operator-to-ingresscontroller-identity",
                "app": "agic",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('clusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways/providers/roleAssignments",
            "name": "[concat(variables('agwName'), '/Microsoft.Authorization/', guid(concat(parameters('ingressControllerIdName'), 'appgateway'), resourceGroup().id, parameters('environmentName')))]",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[variables('apwResourceId')]"
            ],
            "comments": "Grant the Azure App Gateway Ingress Controller manage identity with Contributor role permissions over the Azure Application Gateway service instance",
            "tags": {
                "displayName": "App gateway ingress controller RBAC Contributor",
                "what": "agic-rbac-contributor-to-appgw",
                "app": "appgateway-ingress-controller",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('contributorRole')]",
                "principalId": "[parameters('ingressControllerPrincipalId')]",
                "scope": "[variables('apwResourceId')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(concat(parameters('ingressControllerIdName'), 'resourcegroup', parameters('environmentName')), resourceGroup().id)]",
            "apiVersion": "2020-04-01-preview",
            "comments": "Grant the Azure App Gateway Ingress Controller manage identity with Reader role permissions over the cluster resource group",
            "tags": {
                "displayName": "App gateway ingress controller RBAC Reader",
                "what": "agic-rbac-reader-to-resourcegroup",
                "app": "appgateway-ingress-controller",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRole')]",
                "principalId": "[parameters('ingressControllerPrincipalId')]",
                "scope": "[resourceGroup().id]"
            }
        }
    ],
    "outputs": {
        "acrName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
            "type": "string"
        },
        "aksClusterName": {
            "type": "string",
            "value": "[variables('clusterName')]"
        },
        "agwName": {
            "type": "string",
            "value": "[variables('agwName')]"
        },
        "aksIngressControllerUserManageIdentityResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'aksic-to-keyvault')]"
        },
        "aksIngressControllerUserManageIdentityClientId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities','aksic-to-keyvault')).clientId]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "containerRegistryName": {
            "type": "string",
            "value": "[variables('environmentSettings')[parameters('environmentName')].acrName]"
        },
        "appInsightsName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
            "type": "string"
        },
        "deliveryKeyVaultUri": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)).vaultUri]",
            "type": "string"
        },
        "deliveryCosmosDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
            "type": "string"
        },
        "droneSchedulerKeyVaultName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
            "type": "string"
        },
        "droneSchedulerKeyVaultUri": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)).vaultUri]",
            "type": "string"
        },
        "droneSchedulerCosmosDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
            "type": "string"
        },
        "packageMongoDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
            "type": "string"
        },
        "workflowKeyVaultName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
            "type": "string"
        },
        "ingestionQueueNamespace": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
            "type": "string"
        },
        "ingestionQueueName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
            "type": "string"
        },
        "ingestionServiceAccessKeyName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKeyName]",
            "type": "string"
        }
    }
}
